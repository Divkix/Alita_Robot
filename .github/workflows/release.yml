name: Release

on:
  push:
    tags:
      - "v*"  # More specific tag pattern for semantic versioning
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to release (e.g., v1.2.3)"
        required: true
        type: string

# Restrict permissions to minimum required for enhanced security
permissions:
  contents: read

jobs:
  # Validate release prerequisites
  pre-release-validation:
    name: Pre-Release Validation
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      tag: ${{ steps.validate-tag.outputs.tag }}
      is-prerelease: ${{ steps.validate-tag.outputs.is-prerelease }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2.11.1
        with:
          egress-policy: audit
          
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for validation
          
      - name: Validate and extract tag
        id: validate-tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            tag="${{ github.event.inputs.tag }}"
            echo "Using workflow dispatch tag: $tag"
          else
            tag=${GITHUB_REF#refs/tags/}
            echo "Using push tag: $tag"
          fi
          
          # Validate semantic versioning format
          if [[ ! $tag =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.-]+)?(\+[a-zA-Z0-9\.-]+)?$ ]]; then
            echo "Invalid tag format: $tag. Expected semantic versioning (e.g., v1.2.3, v1.2.3-alpha.1)"
            exit 1
          fi
          
          # Check if this is a prerelease
          if [[ $tag =~ -[a-zA-Z] ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          fi
          
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "Validated tag: $tag"

  # Run comprehensive CI checks before release
  release-ci-checks:
    name: Release CI Checks
    runs-on: ubuntu-latest
    needs: pre-release-validation
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2.11.1
        with:
          egress-policy: audit
          
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "stable"
          
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-release-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-release-
            ${{ runner.os }}-go-
            
      # Run security scanning before release
      - name: Run gosec Security Scanner
        run: |
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          gosec -fmt sarif -out results.sarif ./...
          
      - name: Upload SARIF file
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
          
      - name: Run vulnerability check
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...
          
      # Verify build works before release
      - name: Test release build
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          args: release --snapshot --skip=publish --clean --skip=sign

  # Main release job with enhanced security and SLSA provenance
  goreleaser:
    name: Release with GoReleaser
    runs-on: ubuntu-latest
    needs: [pre-release-validation, release-ci-checks]
    permissions:
      contents: write          # Required for creating releases
      packages: write          # Required for pushing Docker images
      id-token: write          # Required for SLSA provenance
      attestations: write      # Required for artifact attestation
    # Note: GoReleaser doesn't provide direct outputs, artifacts are uploaded separately
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2.11.1
        with:
          egress-policy: audit
          
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history needed for GoReleaser
          
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "stable"
          
      # Cache for release performance
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-release-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-release-
            ${{ runner.os }}-go-
            
      # Install UPX for binary compression
      - name: Install UPX
        uses: crazy-max/ghaction-upx@v3
        with:
          install-only: true
          
      # Handle tag creation for workflow_dispatch
      - name: Create and push tag
        if: github.event_name == 'workflow_dispatch'
        env:
          # GH_PAT is required here because GITHUB_TOKEN doesn't have permission to create tags
          # Required permissions: contents:write
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          git config --global user.email "divkix@divkix.me"
          git config --global user.name "Divanshu Chauhan"
          tag="${{ github.event.inputs.tag }}"
          
          # Check if tag already exists
          if git rev-parse "$tag" >/dev/null 2>&1; then
            echo "Tag $tag already exists, skipping creation"
          else
            echo "Creating tag $tag"
            git tag -a "$tag" -m "Release $tag"
            git push origin "$tag"
          fi
          
      # Authenticate with GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      # Import GPG key for signing
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          
      # Run GoReleaser with enhanced configuration
      - name: Run GoReleaser
        id: release
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

  # Note: SLSA provenance generation commented out as it requires artifact metadata
  # that would need to be collected from GoReleaser outputs
  # provenance:
  #   name: Generate SLSA Provenance  
  #   needs: [goreleaser]
  #   permissions:
  #     actions: read
  #     id-token: write
  #     contents: write
  #   uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
  #   with:
  #     base64-subjects: "..." # Would need artifact metadata
      
  # Attest artifacts for enhanced security
  attest-artifacts:
    name: Attest Release Artifacts
    runs-on: ubuntu-latest
    needs: [goreleaser]
    permissions:
      id-token: write
      attestations: write
      contents: read
    steps:
      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          
      - name: Attest artifacts
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: './artifacts/**/*'

  # Post-release security scanning of published artifacts
  post-release-scan:
    name: Post-Release Security Scan
    runs-on: ubuntu-latest
    needs: [goreleaser]
    if: always() && needs.goreleaser.result == 'success'
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2.11.1
        with:
          egress-policy: audit
          
      - name: Scan Docker images
        run: |
          # Scan the published Docker images for vulnerabilities
          docker pull ghcr.io/divideprojects/alita_robot:latest
          
          # You can add additional vulnerability scanning tools here
          echo "Docker image scan completed"
          
      # Notify on successful release
      - name: Release notification
        run: |
          echo "üéâ Release completed successfully!"
          echo "üì¶ Artifacts published to GitHub Releases"
          echo "üê≥ Docker images available at ghcr.io/divideprojects/alita_robot"
          echo "üîí SLSA provenance and attestations generated for supply chain security"
