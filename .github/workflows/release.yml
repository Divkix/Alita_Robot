name: Release

on:
  push:
    tags:
      - "*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to release (e.g., 1.2.3)"
        required: true
        type: string
        default: "1.0.0" # Default tag for manual dispatch

# Restrict permissions to minimum required for enhanced security
permissions:
  contents: read

jobs:
  release-ci-checks:
    name: Release CI Checks
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "stable"

      # Run security scanning before release
      - name: Run Gosec Security Scanner
        uses: securego/gosec@v2.22.8
        with:
          args: -fmt sarif -out gosec.sarif ./...

      - name: Upload Gosec SARIF to Code Scanning
        if: ${{ hashFiles('gosec.sarif') != '' }}
        continue-on-error: true
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec.sarif

      - name: Run vulnerability check
        continue-on-error: true
        uses: golang/govulncheck-action@v1

      # Verify build works before release
      - name: Test release build
        run: |
          go build -o alita_robot .
          if [ ! -f alita_robot ]; then
            echo "Build failed, exiting"
            exit 1
          fi
          echo "Build successful"

  # Main release job with enhanced security and SLSA provenance
  goreleaser:
    name: Release with GoReleaser
    runs-on: ubuntu-latest
    needs: [release-ci-checks]
    permissions:
      contents: write # Required for creating releases
      packages: write # Required for pushing Docker images
      id-token: write # Required for SLSA provenance
      attestations: write # Required for artifact attestation
    # Note: GoReleaser doesn't provide direct outputs, artifacts are uploaded separately
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history needed for GoReleaser

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "stable"

      # Handle tag creation for workflow_dispatch
      - name: Create and push tag
        if: github.event_name == 'workflow_dispatch'
        env:
          # GH_PAT is required here because GITHUB_TOKEN doesn't have permission to create tags
          # Required permissions: contents:write
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          tag="${{ github.event.inputs.tag }}"

          # Check if tag already exists
          if git rev-parse "$tag" >/dev/null 2>&1; then
            echo "Tag $tag already exists, skipping creation"
          else
            echo "Creating tag $tag"
            git tag -a "$tag" -m "Release $tag"
            git push origin "$tag"
          fi

      # Authenticate with GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Run GoReleaser with enhanced configuration
      - name: Run GoReleaser
        id: release
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload release artifacts for attestation
      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: dist/*
          retention-days: 1

  # Note: SLSA provenance generation commented out as it requires artifact metadata
  # that would need to be collected from GoReleaser outputs
  # provenance:
  #   name: Generate SLSA Provenance
  #   needs: [goreleaser]
  #   permissions:
  #     actions: read
  #     id-token: write
  #     contents: write
  #   uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
  #   with:
  #     base64-subjects: "..." # Would need artifact metadata

  # Attest artifacts for enhanced security
  attest-artifacts:
    name: Attest Release Artifacts
    runs-on: ubuntu-latest
    needs: [goreleaser]
    permissions:
      id-token: write
      attestations: write
      contents: read
    steps:
      - name: Download release artifacts
        uses: actions/download-artifact@v5
        with:
          name: release-artifacts
          path: ./artifacts

      - name: Attest artifacts
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: "./artifacts/*"

  # Post-release security scanning of published artifacts
  post-release-scan:
    name: Post-Release Security Scan
    runs-on: ubuntu-latest
    needs: [goreleaser]
    if: always() && needs.goreleaser.result == 'success'
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Scan Docker images
        run: |
          # Scan the published Docker images for vulnerabilities
          docker pull ghcr.io/divkix/alita_robot:latest

          # You can add additional vulnerability scanning tools here
          echo "Docker image scan completed"

      # Notify on successful release
      - name: Release notification
        run: |
          echo "üéâ Release completed successfully!"
          echo "üì¶ Artifacts published to GitHub Releases"
          echo "üê≥ Docker images available at ghcr.io/divkix/alita_robot"
          echo "üîí SLSA provenance and attestations generated for supply chain security"
