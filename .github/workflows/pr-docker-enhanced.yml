name: PR Docker Build

on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
      - reopened
      - closed
    paths-ignore:
      - "docs/**"
      - "*.md"
      - ".gitignore"
      - "locales/**"

# Restrict permissions to minimum required
permissions:
  contents: read
  packages: write
  pull-requests: write

# Cancel in-progress runs for the same PR
concurrency:
  group: pr-docker-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  # Run basic CI checks first (reuse existing logic)
  pre-build-checks:
    name: Pre-build Checks
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "stable"
          cache: true
          cache-dependency-path: go.sum

      - name: Quick lint check
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --fast --timeout=3m
          skip-cache: false

      - name: Verify build
        run: |
          CGO_ENABLED=0 go build -ldflags="-s -w" -o /tmp/alita_robot ./main.go
          echo "Build verification passed"

  # Build and push Docker images
  docker-build:
    name: Build & Push PR Images
    runs-on: ubuntu-latest
    needs: pre-build-checks
    if: github.event.action != 'closed'
    outputs:
      image-tags: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract short commit SHA
        id: short-sha
        run: echo "short_sha=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT

      # Generate metadata and tags
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/divideprojects/alita_robot
          tags: |
            type=raw,value=pr-${{ github.event.pull_request.number }}-${{ steps.short-sha.outputs.short_sha }}
            type=raw,value=pr-${{ github.event.pull_request.number }}
          labels: |
            org.opencontainers.image.title=Alita Robot PR #${{ github.event.pull_request.number }}
            org.opencontainers.image.description=PR #${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}
            org.opencontainers.image.url=${{ github.event.pull_request.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.revision=${{ github.sha }}
            pr.number=${{ github.event.pull_request.number }}
            pr.head.ref=${{ github.event.pull_request.head.ref }}

      # Build and push multi-arch Docker image
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/pr-build
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=pr-${{ github.event.pull_request.number }}
            type=gha,scope=main
            type=registry,ref=ghcr.io/divideprojects/alita_robot:buildcache
          cache-to: type=gha,mode=max,scope=pr-${{ github.event.pull_request.number }}
          provenance: false
          sbom: false
          build-args: |
            PR_NUMBER=${{ github.event.pull_request.number }}
            COMMIT_SHA=${{ github.sha }}
            BUILDKIT_INLINE_CACHE=1

      # Add build info to job summary (no PR comments)
      - name: Add build info to job summary
        run: |
          echo "## üê≥ Docker Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**PR #${{ github.event.pull_request.number }}**" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** \`ghcr.io/divideprojects/alita_robot:pr-${{ github.event.pull_request.number }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** \`${{ steps.short-sha.outputs.short_sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Digest:** \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms:** \`linux/amd64\`, \`linux/arm64\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quick Test" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Test the latest PR build" >> $GITHUB_STEP_SUMMARY
          echo "docker run --rm ghcr.io/divideprojects/alita_robot:pr-${{ github.event.pull_request.number }} --version" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Test specific commit" >> $GITHUB_STEP_SUMMARY
          echo "docker run --rm ghcr.io/divideprojects/alita_robot:pr-${{ github.event.pull_request.number }}-${{ steps.short-sha.outputs.short_sha }} --version" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_Images are automatically cleaned up when the PR is closed._" >> $GITHUB_STEP_SUMMARY
  # Cleanup job when PR is closed
  cleanup-pr-images:
    name: Cleanup PR Images
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'
    permissions:
      packages: write
      pull-requests: write
    steps:
      - name: Delete PR Docker images
        uses: actions/github-script@v7
        with:
          script: |
            const packageName = 'alita_robot';
            const prNumber = context.payload.pull_request.number;

            try {
              const { data: versions } = await github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
                package_type: 'container',
                package_name: packageName,
                org: context.repo.owner,
                per_page: 100
              });

              const prVersions = versions.filter(version =>
                version.metadata?.container?.tags?.some(tag =>
                  tag.startsWith(`pr-${prNumber}-`) || tag === `pr-${prNumber}`
                )
              );

              let deletedCount = 0;
              for (const version of prVersions) {
                try {
                  await github.rest.packages.deletePackageVersionForOrg({
                    package_type: 'container',
                    package_name: packageName,
                    org: context.repo.owner,
                    package_version_id: version.id
                  });
                  deletedCount++;
                  console.log(`Deleted image version: ${version.id} with tags: ${version.metadata.container.tags.join(', ')}`);
                } catch (deleteError) {
                  console.log(`Failed to delete version ${version.id}: ${deleteError.message}`);
                }
              }

              console.log(`Cleaned up ${deletedCount} Docker image versions for PR #${prNumber}`);

              // Comment on the closed PR
              await github.rest.issues.createComment({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `üßπ **Cleanup completed** - Removed ${deletedCount} Docker image(s) for this PR.`
              });

            } catch (error) {
              console.log(`Error during cleanup: ${error.message}`);
              // Create comment about cleanup failure
              try {
                await github.rest.issues.createComment({
                  issue_number: prNumber,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `‚ö†Ô∏è **Cleanup partially failed** - Some Docker images for this PR may need manual removal.`
                });
              } catch (commentError) {
                console.log(`Failed to create cleanup comment: ${commentError.message}`);
              }
            }
