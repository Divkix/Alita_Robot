name: CI

on:
  push:
    branches:
      - main
      - dev
    tags-ignore:
      - "**"
  pull_request:
  workflow_dispatch:

# Restrict permissions to minimum required for enhanced security
permissions:
  contents: read
  security-events: write

jobs:
  # Migration sync verification
  migration-sync-check:
    name: Migration Sync Verification
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify migration directories exist
        run: |
          if [ ! -d "supabase/migrations" ]; then
            echo "‚ùå Error: supabase/migrations directory not found"
            exit 1
          fi
          if [ ! -d "psql/migrations" ]; then
            echo "‚ùå Error: psql/migrations directory not found"
            exit 1
          fi
          echo "‚úÖ Both migration directories exist"

      - name: Check migration file sync
        run: |
          echo "üìã Comparing migration files..."
          
          # Get list of files in each directory
          supabase_files=$(ls -1 supabase/migrations/*.sql 2>/dev/null | xargs -n 1 basename | sort)
          psql_files=$(ls -1 psql/migrations/*.sql 2>/dev/null | xargs -n 1 basename | sort)
          
          # Check if file lists match
          if [ "$supabase_files" != "$psql_files" ]; then
            echo "‚ùå Migration files are out of sync!"
            echo ""
            echo "Supabase migrations:"
            echo "$supabase_files"
            echo ""
            echo "PostgreSQL migrations:"
            echo "$psql_files"
            echo ""
            echo "Please run 'make psql-prepare' to synchronize migrations"
            exit 1
          fi
          
          echo "‚úÖ Migration filenames match"

      - name: Verify migration processing
        run: |
          echo "üîß Running psql-prepare to verify processing..."
          
          # Create temporary directory for comparison
          mkdir -p /tmp/test-psql-migrations
          
          # Process migrations to temporary location
          for file in supabase/migrations/*.sql; do
            filename=$(basename "$file")
            sed -E '/(grant|GRANT).*(anon|authenticated|service_role)/d' "$file" | \
            sed 's/ with schema "extensions"//g' | \
            sed 's/create extension if not exists/CREATE EXTENSION IF NOT EXISTS/g' | \
            sed 's/create extension/CREATE EXTENSION IF NOT EXISTS/g' > "/tmp/test-psql-migrations/$filename"
          done
          
          # Compare with existing psql migrations
          for file in psql/migrations/*.sql; do
            filename=$(basename "$file")
            if ! diff -q "$file" "/tmp/test-psql-migrations/$filename" > /dev/null 2>&1; then
              echo "‚ùå Migration $filename is not properly synchronized!"
              echo "Differences found:"
              diff "$file" "/tmp/test-psql-migrations/$filename" || true
              echo ""
              echo "Please run 'make psql-prepare' to update psql migrations"
              exit 1
            fi
          done
          
          echo "‚úÖ All migrations are properly processed and synchronized"
          
          # Cleanup
          rm -rf /tmp/test-psql-migrations

  # Security and code quality checks that run in parallel
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "stable"

      - name: Download dependencies
        run: go mod download

      # Security vulnerability scanning with gosec
      - name: Run Gosec Security Scanner
        uses: securego/gosec@v2.22.1
        with:
          args: ./...
      # Check for known vulnerabilities in Go modules
      - name: Run govulncheck
        uses: golang/govulncheck-action@v1

  lint-and-test:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["oldstable", "stable"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Download dependencies
        run: go mod download

      # Install golangci-lint
      - name: Run linting
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          skip-cache: true # We're already caching
          install-mode: binary

      # Run tests with coverage (if tests exist)
      - name: Run tests with coverage
        run: |
          if [ -n "$(find . -name '*_test.go' -not -path './vendor/*')" ]; then
            go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
            go tool cover -html=coverage.out -o coverage.html
          else
            echo "No tests found, skipping test execution"
          fi

      # Upload coverage to artifacts for analysis
      - name: Upload coverage reports
        if: matrix.go-version == 'stable'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.out
            coverage.html
          retention-days: 30

  # Build verification using GoReleaser snapshot
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [security-scan, lint-and-test]
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history needed for GoReleaser

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "stable"

      # Verify all target platforms can be built
      - name: Run GoReleaser snapshot
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          args: release --snapshot --skip=publish --clean --skip=sign

      # Package build artifacts for analysis
      - name: Package build artifacts
        run: tar -czvf artifacts.tar.gz dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: artifacts.tar.gz
          retention-days: 14

  # Summary job that aggregates all check results
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [migration-sync-check, security-scan, lint-and-test, build-verification]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [ "${{ needs.migration-sync-check.result }}" != "success" ] || \
             [ "${{ needs.security-scan.result }}" != "success" ] || \
             [ "${{ needs.lint-and-test.result }}" != "success" ] || \
             [ "${{ needs.build-verification.result }}" != "success" ]; then
            echo "One or more CI jobs failed!"
            exit 1
          fi
          echo "All CI checks passed successfully!"
