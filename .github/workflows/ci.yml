name: CI

on:
  push:
    branches:
      - main
    tags-ignore:
      - "**"
  pull_request:
  workflow_dispatch:

# Restrict permissions to minimum required for enhanced security
permissions:
  contents: read
  security-events: write

# Cancel in-progress runs for the same ref/PR to avoid duplicates
concurrency:
  group: ci-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Security and code quality checks that run in parallel
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "stable"

      - name: Download dependencies
        run: go mod download

      # Security vulnerability scanning with gosec (generate SARIF)
      - name: Run Gosec Security Scanner (SARIF)
        uses: securego/gosec@v2.22.8
        with:
          args: -no-fail -fmt sarif -out gosec.sarif ./...

      - name: Upload Gosec SARIF to Code Scanning
        uses: github/codeql-action/upload-sarif@v3.29.9
        with:
          sarif_file: gosec.sarif
          category: gosec
      # Check for known vulnerabilities in Go modules
      - name: Run govulncheck
        continue-on-error: true
        uses: golang/govulncheck-action@v1

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["oldstable", "stable"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Download dependencies
        run: go mod download

      # Install golangci-lint
      - name: Run linting
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          skip-cache: true # We're already caching
          install-mode: binary

  # Simple build verification with go build and docker build
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [security, lint]
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "stable"

      - name: Download dependencies
        run: go mod download

      # Verify Go binary can be built
      - name: Build Go binary
        run: |
          echo "Building Go binary..."
          go build -o alita_robot .
          echo "✓ Go build successful"
          ls -lh alita_robot

      # Verify Docker image can be built
      - name: Build Docker image
        run: |
          echo "Building Docker image..."
          docker build -f docker/alpine -t test-build:latest .
          echo "✓ Docker build successful"
          docker images | grep test-build

      # Upload build artifact
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact-${{ github.sha }}
          path: alita_robot
          retention-days: 14

  # Publish Docker images for main branch pushes
  docker-publish:
    name: Publish Docker Images
    runs-on: ubuntu-latest
    needs: [security, lint, build-verification]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    outputs:
      image-tags: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract short commit SHA
        id: short-sha
        run: echo "short_sha=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT

      # Generate metadata and tags
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/divkix/alita_robot
          tags: |
            type=raw,value=dev
            type=raw,value=dev-${{ steps.short-sha.outputs.short_sha }}
            type=raw,value=${{ steps.short-sha.outputs.short_sha }}
          labels: |
            org.opencontainers.image.title=Alita Robot Development Build
            org.opencontainers.image.description=Development build from main branch
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.ref.name=${{ github.ref_name }}

      # Build and push multi-arch Docker image
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/alpine
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=main
            type=registry,ref=ghcr.io/divkix/alita_robot:buildcache
          cache-to: type=gha,mode=max,scope=main
          provenance: false
          sbom: false
          build-args: |
            COMMIT_SHA=${{ github.sha }}
            BUILDKIT_INLINE_CACHE=1

      # Add build info to job summary
      - name: Add build info to job summary
        run: |
          echo "## 🐳 Docker Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Main Branch Build**" >> $GITHUB_STEP_SUMMARY
          echo "- **Latest Dev:** \`ghcr.io/divkix/alita_robot:dev\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit Build:** \`ghcr.io/divkix/alita_robot:${{ steps.short-sha.outputs.short_sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Dev + Commit:** \`ghcr.io/divkix/alita_robot:dev-${{ steps.short-sha.outputs.short_sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Digest:** \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms:** \`linux/amd64\`, \`linux/arm64\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quick Test" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Test the latest dev build" >> $GITHUB_STEP_SUMMARY
          echo "docker run --rm ghcr.io/divkix/alita_robot:dev --version" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Test specific commit" >> $GITHUB_STEP_SUMMARY
          echo "docker run --rm ghcr.io/divkix/alita_robot:${{ steps.short-sha.outputs.short_sha }} --version" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # Summary job that aggregates all check results
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [security, lint, build-verification, docker-publish]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [ "${{ needs.security.result }}" != "success" ] || \
             [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.build-verification.result }}" != "success" ]; then
            echo "One or more CI jobs failed!"
            exit 1
          fi

          # Check docker-publish only if it was supposed to run
          if [ "${{ github.ref }}" == "refs/heads/main" ] && [ "${{ github.event_name }}" == "push" ]; then
            if [ "${{ needs.docker-publish.result }}" != "success" ]; then
              echo "Docker publish job failed!"
              exit 1
            fi
            echo "All CI checks and Docker publishing completed successfully!"
          else
            echo "All CI checks passed successfully!"
          fi
