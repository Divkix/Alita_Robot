name: CI

on:
  push:
    branches:
      - main
      - dev
    tags-ignore:
      - "**"
  pull_request:
  workflow_dispatch:

env:
  GO_VERSION: "1.24.5"

permissions:
  contents: read
  security-events: write
  checks: write

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=10m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

      - name: Run gosec
        uses: securego/gosec@v2.22.7
        with:
          args: "-no-fail -fmt sarif -out gosec-results.sarif ./..."

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: gosec-results.sarif

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go: ["1.23", "1.24"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}
          cache: true

      - name: Get dependencies
        run: |
          go mod download
          go mod verify

      - name: Run tests
        run: |
          go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload coverage
        if: matrix.os == 'ubuntu-latest' && matrix.go == env.GO_VERSION
        uses: codecov/codecov-action@v5
        continue-on-error: true
        with:
          files: ./coverage.txt
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    name: Build Check
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [lint, security, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cache GoReleaser
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/goreleaser
            dist/
          key: ${{ runner.os }}-goreleaser-${{ hashFiles('.goreleaser.yaml') }}
          restore-keys: |
            ${{ runner.os }}-goreleaser-

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          args: release --snapshot --skip=publish --clean --skip=sign

      - name: Test Docker build
        run: |
          docker build -f Dockerfile.alpine -t test-build .

      - name: Tar artifacts
        run: tar -czvf artifacts.tar.gz dist/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ci-artifacts-${{ github.sha }}
          path: artifacts.tar.gz
          retention-days: 7

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Check for outdated dependencies
        run: |
          go list -u -m all

      - name: Verify go.mod and go.sum
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum

  docker-lint:
    name: Docker Lint
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile.alpine
          ignore: DL3018,DL3008

      - name: Run hadolint on other Dockerfiles
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile.goreleaser
          ignore: DL3018,DL3008
