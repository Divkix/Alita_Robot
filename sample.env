# Bot Configuration
BOT_TOKEN=
BOT_VERSION=
MESSAGE_DUMP=
OWNER_ID=

# Telegram Bot API Server (Optional)
# For using local telegram-bot-api server with Docker Compose
# Obtain these from https://my.telegram.org/apps
# TELEGRAM_API_ID=
# TELEGRAM_API_HASH=
# API_SERVER=http://telegram-bot-api:8081

# PostgreSQL Configuration
# Format: postgres://username:password@host:port/database?sslmode=disable
DATABASE_URL=postgres://postgres:password@localhost:5432/alita_robot?sslmode=disable

# Database Connection Pool Configuration (Optional)
# These settings control database connection pooling for optimal performance
# Optimized for high-performance deployments

# Maximum number of idle connections in the pool
# Default: 10 connections
# Optimized: 50 connections for better connection reuse
# Recommended: 30-80 depending on deployment size (small/medium/large)
#DB_MAX_IDLE_CONNS=50

# Maximum number of open connections to the database
# Default: 100 connections  
# Optimized: 200 connections for handling burst traffic
# Recommended: 150-400 depending on deployment size
# Small deployment: 100, Medium: 200, Large: 300-400
#DB_MAX_OPEN_CONNS=200

# Maximum amount of time a connection can be reused (in minutes)
# Default: 60 minutes (1 hour)
# Optimized: 240 minutes (4 hours) for better connection reuse
# Recommended: 120-480 minutes depending on database server settings
#DB_CONN_MAX_LIFETIME_MIN=240

# Maximum amount of time a connection can be idle (in minutes)
# Default: 10 minutes
# Optimized: 60 minutes for keeping connections warm longer
# Recommended: 30-120 minutes depending on connection patterns
#DB_CONN_MAX_IDLE_TIME_MIN=60

# Redis Configuration
REDIS_ADDRESS=localhost:6379
REDIS_PASSWORD=

# Webhook Configuration (set USE_WEBHOOKS=true to enable)
USE_WEBHOOKS=false
WEBHOOK_DOMAIN=https://your-bot-domain.com
WEBHOOK_SECRET=your-random-secret-string
WEBHOOK_PORT=8080

# Cloudflare Tunnel Token (only needed if using webhooks)
CLOUDFLARE_TUNNEL_TOKEN=

# Other settings
ENABLED_LOCALES=en
DEBUG=false
DROP_PENDING_UPDATES=true

# Performance and Concurrency Settings (Optional)
# These settings control worker pool sizes for concurrent operations
# If not set, the system will use intelligent defaults based on your CPU cores

# Chat validation worker pool - controls how many chats are validated concurrently during cleanup
# Default: 10 workers
# Recommended: 5-15 depending on API rate limits and system resources
#CHAT_VALIDATION_WORKERS=10

# Database operation worker pool - controls concurrent database operations
# Default: 5 workers
# Recommended: 3-10 depending on database connection limits
#DATABASE_WORKERS=5

# Message processing pipeline workers - handles concurrent message validation stages
# Default: Number of CPU cores (capped at 8)
# Recommended: 4-12 depending on message volume
#MESSAGE_PIPELINE_WORKERS=8

# Bulk operation workers - handles large batch database operations
# Default: 4 workers
# Recommended: 2-8 depending on database performance
#BULK_OPERATION_WORKERS=4

# Cache operation workers - handles concurrent cache operations
# Default: 3 workers
# Recommended: 2-5 for most use cases
#CACHE_WORKERS=3

# Background statistics collection workers - collects performance metrics
# Default: 2 workers
# Recommended: 1-3 workers
#STATS_COLLECTION_WORKERS=2

# Safety and Resource Limits (Optional)
# These settings protect against resource exhaustion

# Maximum concurrent operations across all worker pools
# Default: 50 operations
# Recommended: 30-100 depending on server resources
#MAX_CONCURRENT_OPERATIONS=50

# Default timeout for operations in seconds
# Default: 30 seconds
# Recommended: 15-60 seconds depending on operation complexity
#OPERATION_TIMEOUT_SECONDS=30

# Maximum concurrent goroutines for the update dispatcher
# Controls how many updates can be processed simultaneously
# Default: 100 goroutines
# Optimized: 200 goroutines for better throughput
# Recommended values:
# - Low-resource environments: 50-100 to prevent memory issues
# - Standard deployment: 200 (optimized default)
# - High-traffic bots: 300-500 for maximum throughput
# - Development/testing: 10 for easier debugging
#DISPATCHER_MAX_ROUTINES=200

# Monitoring and Statistics (Optional)
# Enable performance monitoring and background statistics collection

# Enable automatic performance monitoring and alerting
# Default: true in production (when DEBUG=false), false in debug mode
# Set to true to enable detailed performance tracking
#ENABLE_PERFORMANCE_MONITORING=true

# Enable background statistics collection
# Default: true in production (when DEBUG=false), false in debug mode
# Set to true to collect system metrics in the background
#ENABLE_BACKGROUND_STATS=true

# Cache Configuration (Optional)
# Configure Ristretto cache parameters for optimal performance

# Number of counters in the cache bloom filter (tracks frequency)
# Default: 10000 (10x more than original for better performance)
# Optimized: 100000 for maximum hit rate accuracy
# Recommended: 50000-500000 depending on memory available
# Higher values = better hit rate accuracy but more memory usage
#CACHE_NUM_COUNTERS=100000

# Maximum cost (size) of the cache in arbitrary units
# Default: 10000 (100x more than original for better hit rates)
# Optimized: 1000000 for maximum cache capacity
# Recommended: 100000-10000000 depending on available memory
# Higher values = larger cache capacity but more memory usage
#CACHE_MAX_COST=1000000

# ============ Activity Monitoring Configuration ============
# Number of days of inactivity before marking a chat as inactive
# Default: 30
# Range: 1-365 days
#INACTIVITY_THRESHOLD_DAYS=30

# Hours between automatic activity checks
# Default: 1 (checks every hour)
# Range: 1-24 hours
#ACTIVITY_CHECK_INTERVAL=1

# Enable automatic cleanup of inactive chats
# Default: true
# Set to false to disable automatic marking of inactive chats
#ENABLE_AUTO_CLEANUP=true

# ============ Performance Optimization Settings ============
# Advanced settings for high-performance deployments

# Enable query prefetching to reduce database round trips
# Default: true
# Batches multiple related queries into single database calls
#ENABLE_QUERY_PREFETCHING=true

# Enable write-through caching for better cache consistency
# Default: true
# Updates cache immediately when database is modified
#ENABLE_WRITE_THROUGH_CACHE=true

# Enable cache prewarming on startup
# Default: true
# Loads frequently accessed data into cache during bot startup
#ENABLE_CACHE_PREWARMING=true

# Enable async command processing for non-critical operations
# Default: true
# Processes logging, stats, and cleanup operations asynchronously
#ENABLE_ASYNC_PROCESSING=true

# Enable response caching for frequently requested data
# Default: true
# Caches bot responses to reduce duplicate API calls
#ENABLE_RESPONSE_CACHING=true

# Response cache TTL in seconds
# Default: 30 seconds
# How long to cache bot responses before refreshing
#RESPONSE_CACHE_TTL=30

# Enable batch API requests
# Default: true
# Groups multiple Telegram API calls together for better performance
#ENABLE_BATCH_REQUESTS=true

# Batch request timeout in milliseconds
# Default: 100ms
# How long to wait before sending a batch of API requests
#BATCH_REQUEST_TIMEOUT_MS=100

# Enable connection pooling for HTTP clients
# Default: true
# Reuses HTTP connections for better performance
#ENABLE_HTTP_CONNECTION_POOLING=true

# HTTP connection pool size
# Default: 100
# Maximum number of HTTP connections to maintain
#HTTP_MAX_IDLE_CONNS=100

# HTTP connection pool per host
# Default: 50
# Maximum connections per host (api.telegram.org)
#HTTP_MAX_IDLE_CONNS_PER_HOST=50

# ============ Resource Monitoring Limits ============
# Maximum goroutines before triggering cleanup
# Default: 1000
# Recommended: 1000-5000 depending on system resources
#RESOURCE_MAX_GOROUTINES=1000

# Maximum memory usage in MB before triggering cleanup
# Default: 500
# Recommended: 500-2000 depending on available RAM
#RESOURCE_MAX_MEMORY_MB=500

# Memory threshold for triggering garbage collection in MB
# Default: 400
# Recommended: 80% of RESOURCE_MAX_MEMORY_MB
#RESOURCE_GC_THRESHOLD_MB=400

# ============ Database Migration Settings ============
# Automatic database migration configuration

# Enable automatic database migrations on startup
# Default: false (for backward compatibility)
# Set to true to automatically apply SQL migrations when the bot starts
# This will create/update database tables based on files in supabase/migrations/
#AUTO_MIGRATE=false

# Continue running even if migrations fail
# Default: false (bot will exit if migrations fail)
# Set to true to log migration errors but continue running the bot
# WARNING: Only use this in development or if you're certain the schema is correct
#AUTO_MIGRATE_SILENT_FAIL=false

# Custom path to migration files (optional)
# Default: supabase/migrations
# Specify a different directory containing SQL migration files
# Useful for custom deployments or testing
#MIGRATIONS_PATH=supabase/migrations
